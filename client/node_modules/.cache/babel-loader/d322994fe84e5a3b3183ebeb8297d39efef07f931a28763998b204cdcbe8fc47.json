{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst DrinkingLog = require('../models/DrinkingLog');\nconst Achievement = require('../models/Achievement');\nconst UserAchievement = require('../models/UserAchievement');\nrouter.get('/all', async (req, res) => {\n  try {\n    const {\n      userId\n    } = req.query;\n    if (!userId) return res.status(400).json({\n      success: false,\n      error: 'Missing userId'\n    });\n    const now = new Date();\n    const past = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n    const logs = await DrinkingLog.find({\n      user: userId,\n      date: {\n        $gte: past,\n        $lte: now\n      }\n    });\n    return res.json({\n      success: true,\n      logs\n    });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({\n      success: false,\n      error: err.message\n    });\n  }\n});\n\n// GET logs for a specific month\nrouter.get('/:year/:month', async (req, res) => {\n  try {\n    const {\n      userId\n    } = req.query;\n    const {\n      year,\n      month\n    } = req.params;\n    const startDate = new Date(year, month - 1, 1, 0, 0, 0);\n    const endDate = new Date(year, month, 0, 23, 59, 59, 999);\n    const logs = await DrinkingLog.find({\n      user: userId,\n      date: {\n        $gte: startDate,\n        $lte: endDate\n      }\n    });\n    return res.json({\n      success: true,\n      logs\n    });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({\n      success: false,\n      error: err.message\n    });\n  }\n});\n\n// POST update a day's log\nrouter.post('/day', async (req, res) => {\n  try {\n    const {\n      userId,\n      date,\n      status\n    } = req.body;\n    if (!userId) return res.status(400).json({\n      success: false,\n      error: 'No userId'\n    });\n    const [y, m, d] = date.split('-').map(Number);\n    const dateObj = new Date(y, m - 1, d, 12);\n    let log = await DrinkingLog.findOne({\n      user: userId,\n      date: dateObj\n    });\n    if (!log) {\n      log = new DrinkingLog({\n        user: userId,\n        date: dateObj\n      });\n    }\n    log.status = status;\n    await log.save();\n    await checkAndUnlockAchievements(userId);\n    return res.json({\n      success: true,\n      log\n    });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({\n      success: false,\n      error: err.message\n    });\n  }\n});\n\n/**\n * Check and update achievements for the user.\n * Conditions:\n *  - \"first_log\": if at least one log exists.\n *  - \"double_digit_days\": if any calendar month has ≥ 10 logs (any status).\n *  - \"5_days_straight_sober\": if there are 5 consecutive days with status in ['sober', 'medium'].\n *  - \"10_days_straight_sober\": if there are 10 consecutive days with status in ['sober', 'medium'].\n *  - \"1_month_sober\": if there are 30 consecutive days with status in ['sober', 'medium'].\n *  - \"half_year_sober\": if there are 180 consecutive days.\n *  - \"year_sober\": if there are 365 consecutive days.\n *  - \"1_month_dry\": if any complete calendar month is strictly 'sober'.\n *  - \"1_month_since_last_crashout\": if the gap since the last 'heavy' log is ≥ 30 days.\n *  - \"weekend_warrior\": if any Saturday–Sunday pair are both in ['sober','medium'].\n */\nasync function checkAndUnlockAchievements(userId) {\n  try {\n    const logs = await DrinkingLog.find({\n      user: userId\n    }).sort({\n      date: 1\n    });\n    let unlocked = new Set();\n\n    // first_log:\n    if (logs.length >= 1) unlocked.add('first_log');\n\n    // double_digit_days:\n    const monthCounts = {};\n    logs.forEach(log => {\n      const d = new Date(log.date);\n      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\n      monthCounts[key] = (monthCounts[key] || 0) + 1;\n    });\n    for (const key in monthCounts) {\n      if (monthCounts[key] >= 10) {\n        unlocked.add('double_digit_days');\n        break;\n      }\n    }\n\n    // Consecutive streak (sober or medium)\n    let streak = 0;\n    let maxStreak = 0;\n    let prev = null;\n    logs.forEach(log => {\n      if (log.status === 'sober' || log.status === 'medium') {\n        if (prev) {\n          const diff = (log.date - prev) / (1000 * 60 * 60 * 24);\n          if (Math.round(diff) === 1) {\n            streak += 1;\n          } else {\n            streak = 1;\n          }\n        } else {\n          streak = 1;\n        }\n      } else {\n        streak = 0;\n      }\n      if (streak > maxStreak) maxStreak = streak;\n      prev = log.date;\n    });\n    if (maxStreak >= 5) unlocked.add('5_days_straight_sober');\n    if (maxStreak >= 10) unlocked.add('10_days_straight_sober');\n    if (maxStreak >= 30) unlocked.add('1_month_sober');\n    if (maxStreak >= 180) unlocked.add('half_year_sober');\n    if (maxStreak >= 365) unlocked.add('year_sober');\n\n    // 1_month_dry: For each calendar month, check if every day is strictly 'sober'\n    const monthLogs = {};\n    logs.forEach(log => {\n      const d = new Date(log.date);\n      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\n      if (!monthLogs[key]) monthLogs[key] = {};\n      monthLogs[key][d.getDate()] = log.status;\n    });\n    for (const key in monthLogs) {\n      const [yearStr, monthStr] = key.split('-');\n      const year = parseInt(yearStr);\n      const month = parseInt(monthStr);\n      const daysInMonth = new Date(year, month, 0).getDate();\n      const daysObj = monthLogs[key];\n      if (Object.keys(daysObj).length === daysInMonth) {\n        let allSober = true;\n        for (let i = 1; i <= daysInMonth; i++) {\n          if (daysObj[i] !== 'sober') {\n            allSober = false;\n            break;\n          }\n        }\n        if (allSober) {\n          unlocked.add('1_month_dry');\n          break;\n        }\n      }\n    }\n\n    // weekend_warrior: Check for a Saturday–Sunday pair with status in ['sober','medium'].\n    const logsByDate = {};\n    logs.forEach(log => {\n      const key = new Date(log.date).toISOString().split('T')[0];\n      logsByDate[key] = log.status;\n    });\n    for (const key in logsByDate) {\n      const d = new Date(key);\n      if (d.getDay() === 5) {\n        const next = new Date(d);\n        next.setDate(d.getDate() + 1);\n        const nextKey = next.toISOString().split('T')[0];\n        if ((logsByDate[key] === 'sober' || logsByDate[key] === 'medium') && (logsByDate[nextKey] === 'sober' || logsByDate[nextKey] === 'medium')) {\n          unlocked.add('weekend_warrior');\n          break;\n        }\n      }\n    }\n\n    // Update UserAchievement collection individually.\n    const allAchievements = await Achievement.find({});\n    for (const ach of allAchievements) {\n      if (unlocked.has(ach.key)) {\n        await UserAchievement.findOneAndUpdate({\n          user: userId,\n          achievement: ach._id\n        }, {\n          user: userId,\n          achievement: ach._id\n        }, {\n          upsert: true,\n          new: true\n        });\n      } else {\n        await UserAchievement.deleteOne({\n          user: userId,\n          achievement: ach._id\n        });\n      }\n    }\n  } catch (err) {\n    console.error('Error in checkAndUnlockAchievements:', err);\n  }\n}\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","DrinkingLog","Achievement","UserAchievement","get","req","res","userId","query","status","json","success","error","now","Date","past","getFullYear","getMonth","getDate","logs","find","user","date","$gte","$lte","err","console","message","year","month","params","startDate","endDate","post","body","y","m","d","split","map","Number","dateObj","log","findOne","save","checkAndUnlockAchievements","sort","unlocked","Set","length","add","monthCounts","forEach","key","String","padStart","streak","maxStreak","prev","diff","Math","round","monthLogs","yearStr","monthStr","parseInt","daysInMonth","daysObj","Object","keys","allSober","i","logsByDate","toISOString","getDay","next","setDate","nextKey","allAchievements","ach","has","findOneAndUpdate","achievement","_id","upsert","new","deleteOne","module","exports"],"sources":["C:/Users/melkote/Downloads/NearFinalProjectBACSHOTSONME123-main/NearFinalProjectBACSHOTSONME123-main/client/src/api.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst DrinkingLog = require('../models/DrinkingLog');\nconst Achievement = require('../models/Achievement');\nconst UserAchievement = require('../models/UserAchievement');\n\nrouter.get('/all', async (req, res) => {\n  try {\n    const { userId } = req.query;\n    if (!userId)\n      return res.status(400).json({ success: false, error: 'Missing userId' });\n    const now = new Date();\n    const past = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());\n    const logs = await DrinkingLog.find({\n      user: userId,\n      date: { $gte: past, $lte: now },\n    });\n    return res.json({ success: true, logs });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ success: false, error: err.message });\n  }\n});\n\n// GET logs for a specific month\nrouter.get('/:year/:month', async (req, res) => {\n  try {\n    const { userId } = req.query;\n    const { year, month } = req.params;\n    const startDate = new Date(year, month - 1, 1, 0, 0, 0);\n    const endDate = new Date(year, month, 0, 23, 59, 59, 999);\n    const logs = await DrinkingLog.find({\n      user: userId,\n      date: { $gte: startDate, $lte: endDate },\n    });\n    return res.json({ success: true, logs });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ success: false, error: err.message });\n  }\n});\n\n// POST update a day's log\nrouter.post('/day', async (req, res) => {\n  try {\n    const { userId, date, status } = req.body;\n    if (!userId)\n      return res.status(400).json({ success: false, error: 'No userId' });\n    const [y, m, d] = date.split('-').map(Number);\n    const dateObj = new Date(y, m - 1, d, 12);\n    let log = await DrinkingLog.findOne({ user: userId, date: dateObj });\n    if (!log) {\n      log = new DrinkingLog({ user: userId, date: dateObj });\n    }\n    log.status = status;\n    await log.save();\n\n    await checkAndUnlockAchievements(userId);\n\n    return res.json({ success: true, log });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ success: false, error: err.message });\n  }\n});\n\n/**\n * Check and update achievements for the user.\n * Conditions:\n *  - \"first_log\": if at least one log exists.\n *  - \"double_digit_days\": if any calendar month has ≥ 10 logs (any status).\n *  - \"5_days_straight_sober\": if there are 5 consecutive days with status in ['sober', 'medium'].\n *  - \"10_days_straight_sober\": if there are 10 consecutive days with status in ['sober', 'medium'].\n *  - \"1_month_sober\": if there are 30 consecutive days with status in ['sober', 'medium'].\n *  - \"half_year_sober\": if there are 180 consecutive days.\n *  - \"year_sober\": if there are 365 consecutive days.\n *  - \"1_month_dry\": if any complete calendar month is strictly 'sober'.\n *  - \"1_month_since_last_crashout\": if the gap since the last 'heavy' log is ≥ 30 days.\n *  - \"weekend_warrior\": if any Saturday–Sunday pair are both in ['sober','medium'].\n */\nasync function checkAndUnlockAchievements(userId) {\n  try {\n    const logs = await DrinkingLog.find({ user: userId }).sort({ date: 1 });\n    let unlocked = new Set();\n\n    // first_log:\n    if (logs.length >= 1) unlocked.add('first_log');\n\n    // double_digit_days:\n    const monthCounts = {};\n    logs.forEach((log) => {\n      const d = new Date(log.date);\n      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\n      monthCounts[key] = (monthCounts[key] || 0) + 1;\n    });\n    for (const key in monthCounts) {\n      if (monthCounts[key] >= 10) {\n        unlocked.add('double_digit_days');\n        break;\n      }\n    }\n\n    // Consecutive streak (sober or medium)\n    let streak = 0;\n    let maxStreak = 0;\n    let prev = null;\n    logs.forEach((log) => {\n      if (log.status === 'sober' || log.status === 'medium') {\n        if (prev) {\n          const diff = (log.date - prev) / (1000 * 60 * 60 * 24);\n          if (Math.round(diff) === 1) {\n            streak += 1;\n          } else {\n            streak = 1;\n          }\n        } else {\n          streak = 1;\n        }\n      } else {\n        streak = 0;\n      }\n      if (streak > maxStreak) maxStreak = streak;\n      prev = log.date;\n    });\n    if (maxStreak >= 5) unlocked.add('5_days_straight_sober');\n    if (maxStreak >= 10) unlocked.add('10_days_straight_sober');\n    if (maxStreak >= 30) unlocked.add('1_month_sober');\n    if (maxStreak >= 180) unlocked.add('half_year_sober');\n    if (maxStreak >= 365) unlocked.add('year_sober');\n\n    // 1_month_dry: For each calendar month, check if every day is strictly 'sober'\n    const monthLogs = {};\n    logs.forEach((log) => {\n      const d = new Date(log.date);\n      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;\n      if (!monthLogs[key]) monthLogs[key] = {};\n      monthLogs[key][d.getDate()] = log.status;\n    });\n    for (const key in monthLogs) {\n      const [yearStr, monthStr] = key.split('-');\n      const year = parseInt(yearStr);\n      const month = parseInt(monthStr);\n      const daysInMonth = new Date(year, month, 0).getDate();\n      const daysObj = monthLogs[key];\n      if (Object.keys(daysObj).length === daysInMonth) {\n        let allSober = true;\n        for (let i = 1; i <= daysInMonth; i++) {\n          if (daysObj[i] !== 'sober') {\n            allSober = false;\n            break;\n          }\n        }\n        if (allSober) {\n          unlocked.add('1_month_dry');\n          break;\n        }\n      }\n    }\n\n\n    // weekend_warrior: Check for a Saturday–Sunday pair with status in ['sober','medium'].\n    const logsByDate = {};\n    logs.forEach(log => {\n      const key = new Date(log.date).toISOString().split('T')[0];\n      logsByDate[key] = log.status;\n    });\n    for (const key in logsByDate) {\n      const d = new Date(key);\n      if (d.getDay() === 5) {\n        const next = new Date(d);\n        next.setDate(d.getDate() + 1);\n        const nextKey = next.toISOString().split('T')[0];\n        if (\n          (logsByDate[key] === 'sober' || logsByDate[key] === 'medium') &&\n          (logsByDate[nextKey] === 'sober' || logsByDate[nextKey] === 'medium')\n        ) {\n          unlocked.add('weekend_warrior');\n          break;\n        }\n      }\n    }\n\n    // Update UserAchievement collection individually.\n    const allAchievements = await Achievement.find({});\n    for (const ach of allAchievements) {\n      if (unlocked.has(ach.key)) {\n        await UserAchievement.findOneAndUpdate(\n          { user: userId, achievement: ach._id },\n          { user: userId, achievement: ach._id },\n          { upsert: true, new: true }\n        );\n      } else {\n        await UserAchievement.deleteOne({ user: userId, achievement: ach._id });\n      }\n    }\n  } catch (err) {\n    console.error('Error in checkAndUnlockAchievements:', err);\n  }\n}\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}